package io.github.giulong.spectrum.it.tests;

import io.github.giulong.spectrum.it.pages.InputsPage;
import io.github.giulong.spectrum.it.pages.LoginPage;
import net.datafaker.providers.base.Name;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

import java.util.Objects;

import static org.junit.jupiter.api.Assertions.*;
import static org.openqa.selenium.Keys.ARROW_UP;
import static org.openqa.selenium.support.ui.ExpectedConditions.urlContains;

@DisplayName("Faker")
@SuppressWarnings("unused")
public class FakerIT extends BaseIT {

    private LoginPage loginPage;
    private InputsPage inputsPage;

    @Test
    @DisplayName("the login should fail leveraging random name generated by Faker")
    void login() {
        final Name name = faker.name();
        loginPage
                .open()
                .loginWith(name.firstName(), name.lastName());

        pageLoadWait.until(urlContains("/login"));

        assertTrue(isPresent(By.id("flash")));
        assertFalse(Objects.requireNonNull(driver.getCurrentUrl()).endsWith("/secure"));
    }

    @DisplayName("expressions should generate random numbers")
    @ParameterizedTest(name = "with {0} increments")
    @ValueSource(ints = {0, 2, 5})
    void inputs(final int increments) {
        final String number = faker.expression("#{numerify '##'}");

        inputsPage.open();

        final WebElement input = inputsPage.getInput();
        input.sendKeys(number);

        for (int i = 0; i < increments; i++) {
            input.sendKeys(ARROW_UP);
        }

        final int actual = Integer.parseInt(Objects.requireNonNull(input.getDomProperty("value")));
        final int expected = Integer.parseInt(number) + increments;
        assertEquals(expected, actual);
    }
}
