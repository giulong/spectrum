# Common vars to interpolate other String values in the configuration
vars:
  downloadsFolder: ${user.dir}\target\downloads # Path, as you can see below, where to save downloaded files
  summaryReportOutput: target/spectrum/summary
  testBookReportOutput: target/spectrum/testbook

# Variables related to the runtime environment, meaning the machine where the tests will run, for example your local pc or a remote server
runtime:
  profiles: ${spectrum.profiles:-} # Profiles to be activated. By default, no profile is active. This property is read only from the base configuration.yaml: it doesn't make sense to change it in a profile-specific file
  driver: ${spectrum.driver:-chrome}  # Driver to use
  environment: ${spectrum.environment:-local} # Active runtime environment. Can be local, grid, or appium
  filesFolder: src/test/resources/files # Folder where you will store files to be checked against downloaded ones
  downloadsFolder: ${downloadsFolder} # Destination folder for files downloaded during the execution
  cacheFolder: ${user.home}/.cache/spectrum # Cache folder for storing Spectrum internal cross-executions data

# Application under test
application:
  baseUrl: http://localhost:8080  # Application's under test base url
  screenshotsFolder: null # Path where to save screenshots. If not provided, screenshots are saved in the target folder.
  highlight: # Highlight the web elements the test interacts with. Useful to visually debug the execution
    js: js/highlight.js # Path to the js used to highlight. Relative to the resources folder

# Visual Regression Testing configuration
visualRegression:
  failFast: false # Whether to fail immediately when the first visual regression is found, rather than running the entire test
  snapshots:
    folder: src/test/resources/visual-regression # Where to save the screenshot references
    override: false # Whether to override the snapshots references already generated
  checks: # Checks configuration
    count: 0 # Number of checks to perform before considering a snapshot valid
    interval: .5 # Interval between checks in seconds
    maxRetries: 3 # Max retries before throwing an exception

# TestBook (coverage)
testBook:
  qualityGate:
    condition: ${weightedSuccessful.percentage} > 60  # Execution successful if more than 60% of the weighted tests are successful
  parser:
    yaml:
      path: testbook.yaml # we provided the yaml testbook in src/test/resources/testbook.yaml
  reporters: [ ] # List of testBook reporters that will produce the execution report in specific formats

# Execution video recording
video:
  frames: [ ] # Kind of frames to be added to the video. By default, nothing is recorded
  width: 0  # width of the video. A value of 0 means the actual browser size will be used. High resolution values will significantly impact performance
  height: 0 # height of the video. A value of 0 means the actual browser size will be used. High resolution values will significantly impact performance
  menuBarsHeight: 60 # Browser's menu bars height. When using the browser size (with height: 0), this is used to reduce the screenshots size to avoid stretching them
  skipDuplicateFrames: true # If true, consecutive duplicate frames are not included in the generated video
  extentTest: # Properties of the video tag inside the extent report
    attach: true # by default, the video (if recorded) is attached to the extent report
    width: auto # width of the video in the extent report. Check https://developer.mozilla.org/en-US/docs/Web/CSS/width
    height: 240 # height of the video in the extent report. Check https://developer.mozilla.org/en-US/docs/Web/CSS/height

# Execution summary
summary:
  reporters: [ ] # List of reporters that will produce the summary in specific formats
  condition: ${successfulPercentage} == 100 # Execution successful if all tests are successful

# Extent Report configuration
extent:
  documentTitle: Spectrum Report  # Title of the html page
  reportFolder: target/spectrum/reports # Where to generate the report
  reportName: Spectrum Report   # Name shown in the header of the report
  fileName: spectrum-report-${timestamp}.html  # Name of the report file. you can use the ${timestamp} placeholder, which will be resolved at runtime
  theme: STANDARD   # Theme used. Can be STANDARD or DARK
  timeStampFormat: EEEE dd/MM/yyyy, hh:mm a (zzz)   # Timestamp of each test's start-time and end-time
  locatorRegex: \s->\s(.+?(?=(]]+|]\s+|]$)))  # Regex to extract the WebElement's selector, when the driver fires an event
  retention: { } # Retention rules, specifies the number of reports to retain. Older ones will be deleted. Defaults to MAX_INT
  openAtEnd: false # Set to true if you want the report to be automatically opened when the suite execution is finished
  css: css/report.css # Path to the custom css to apply. Relative to the resources folder
  js: js/report.js # Path to the custom js to apply. Relative to the resources folder
  sort: # How to sort tests in the produced report
    noOp: { } # By default, no sort is applied

# Environments configuration
environments:
  local: { } # The default local environment. No properties available here
  grid: # Grid configuration. By default, we point to a local grid
    url: http://localhost:4444/wd/hub
  appium: # Appium server configuration. Here you can set Appium server capabilities. By default, we point to a local Appium Server
    url: http://localhost:4723/
    service:
      ipAddress: 0.0.0.0 # IP address of the Appium server
      port: 4723 # Sets which port the appium server should be started on. A value of 0 indicates that any free port may be used
      timeout: 20 # Sets timeout in seconds

# Drivers configuration
drivers:
  keepOpen: false # Whether to keep the driver open after the execution
  biDi: false # Whether to enable the BiDi protocol instead of CDP

  waits:
    implicit: 0    # Seconds Selenium waits before throwing a NoSuchElementException when an element isn't found
    pageLoadTimeout: 10   # Seconds that Selenium waits before throwing an exception because the page wasn't fully loaded yet
    scriptTimeout: 10   # Seconds that Selenium waits before throwing a ScriptTimeoutException
    downloadTimeout: 15   # FluentWait injected in test classes/pages that you can use on file download
    auto: # Auto-wait configuration
      enabled: true # Whether to enable the auto-wait
      timeout: 30 # Timeout in seconds

  # Chrome capabilities. See: https://www.selenium.dev/documentation/webdriver/browsers/chrome/
  chrome:
    biDi: false # Whether to enable the BiDi protocol instead of CDP
    args:
      - --disable-search-engine-choice-screen
    capabilities: { }
    experimentalOptions:
      prefs:
        download.prompt_for_download: false
        download.directory_upgrade: true
        download.default_directory: ${downloadsFolder}
        safebrowsing.enabled: true
    service:
      buildCheckDisabled: false
      appendLog: false
      readableTimestamp: false
      logLevel: SEVERE
      silent: false
      verbose: false
      allowedListIps: ''

  # Firefox's capabilities. See: https://www.selenium.dev/documentation/webdriver/browsers/firefox/
  firefox:
    biDi: false # Whether to enable the BiDi protocol instead of CDP
    binary: null
    args: [ ]
    preferences:
      browser.download.folderList: 2
      browser.download.useDownloadDir: true
      browser.download.dir: ${downloadsFolder}
      browser.helperApps.neverAsk.saveToDisk: application/pdf
      pdfjs.disabled: true
    capabilities: { }
    service:
      allowHosts: null
      logLevel: ERROR
      truncatedLogs: false
      profileRoot: ''

  # Edge capabilities. See: https://www.selenium.dev/documentation/webdriver/browsers/edge/
  edge:
    biDi: false # Whether to enable the BiDi protocol instead of CDP
    args: [ ]
    capabilities: { }
    experimentalOptions:
      prefs:
        download.default_directory: ${downloadsFolder}
    service:
      buildCheckDisabled: false
      appendLog: false
      readableTimestamp: false
      logLevel: SEVERE
      silent: false
      verbose: false
      allowedListIps: ''

  # Safari capabilities. See: https://www.selenium.dev/documentation/webdriver/browsers/safari/
  safari:
    service:
      logging: false

  # UIAutomator2 capabilities. See: https://github.com/appium/appium-uiautomator2-driver#capabilities
  uiAutomator2:
    capabilities: { }

  # Espresso capabilities. See: https://github.com/appium/appium-espresso-driver#capabilities
  espresso:
    capabilities: { }

  # XCUITest capabilities. See: https://github.com/appium/appium-xcuitest-driver
  xcuiTest:
    capabilities: { }

  # Windows capabilities. See: https://github.com/appium/appium-windows-driver
  windows:
    capabilities: { }

  # Mac2 capabilities. See: https://github.com/appium/appium-mac2-driver
  mac2:
    capabilities: { }

  # Appium generic capabilities. See: https://appium.io/docs/en/latest/intro/drivers/
  appiumGeneric:
    capabilities: { }

  # Driver's internal logging levels
  logs:
    level: DEBUG  # The level at which driver's logs will be logged in Spectrum (execution) logs
    browser: SEVERE
    driver: SEVERE
    performance: OFF

  # Events fired by the driver, automatically logged and added to the report according to the log level set when running the suite. Specify a level among OFF, TRACE, DEBUG, INFO, WARN
  events:
    beforeAnyCall:
      message: About to call method <code>%2$s</code> with args <code>%3$s</code> on target <code>%1$s</code>
    afterAnyCall:
      message: Called method method <code>%2$s</code> with args <code>%3$s</code> on target <code>%1$s</code> with result <code>%4$s</code>
    onError:
      level: DEBUG
      message: Got a <code>%4$s</code> calling method <code>%2$s</code> with args <code>%3$s</code> on target <code>%1$s</code>
    beforeAnyWebDriverCall:
      message: About to call <code>%2$s</code> with args <code>%3$s</code>
    afterAnyWebDriverCall:
      message: Called <code>%2$s</code> with args <code>%3$s</code> with result <code>%4$s</code>
    beforeGet:
      level: INFO
      message: About to get <a href="%2$s" target="_blank"><code>%2$s</code></a>
    afterGet:
      message: Got <a href="%2$s" target="_blank"><code>%2$s</code></a>
    beforeGetCurrentUrl:
      message: About to get current url
    afterGetCurrentUrl:
      message: Got current url with result <a href="%1$s" target="_blank"><code>%1$s</code></a>
    beforeGetTitle:
      message: About to get title
    afterGetTitle:
      message: Got title <code>%2$s</code>
    beforeFindElement:
      level: DEBUG
      message: About to find element <code>%2$s</code>
    afterFindElement:
      message: Element <code>%2$s</code> is <code>%3$s</code>
    beforeFindElements:
      level: DEBUG
      message: About to find elements <code>%2$s</code>
    afterFindElements:
      message: Elements <code>%2$s</code> are <code>%3$s</code>
    beforeGetPageSource:
      message: About to get page source
    afterGetPageSource:
      level: DEBUG
      message: Page source is:<br/><pre style="max-height:200px; overflow:auto; overflow-x:hidden;">%2$s</pre>
    beforeClose:
      level: DEBUG
      message: About to close
    afterClose:
      message: Closed
    beforeQuit:
      level: DEBUG
      message: About to quit
    afterQuit:
      message: Done quitting
    beforeGetWindowHandles:
      level: DEBUG
      message: About to get window handles
    afterGetWindowHandles:
      message: Got window handles <code>%2$s</code>
    beforeGetWindowHandle:
      level: DEBUG
      message: About to get window handle
    afterGetWindowHandle:
      message: Got window handle <code>%2$s</code>
    beforeExecuteScript:
      level: DEBUG
      message: About to execute script <code>%2$s</code> with args <code>%3$s</code>
    afterExecuteScript:
      message: Result of script <code>%2$s</code> with args <code>%3$s</code> is <code>%4$s</code>
    beforeExecuteAsyncScript:
      level: DEBUG
      message: About to execute async script <code>%2$s</code> with args <code>%3$s</code>
    afterExecuteAsyncScript:
      message: Result of async script <code>%2$s</code> with args <code>%3$s</code> is <code>%4$s</code>
    beforePerform:
      level: DEBUG
      message: About to perform actions <code>%2$s</code>
    afterPerform:
      message: Performed actions <code>%2$s</code>
    beforeResetInputState:
      message: About to reset input state
    afterResetInputState:
      message: Done resetting input state
    beforeAnyWebElementCall:
      message: About to call <code>%2$s</code> with args <code>%3$s</code> on <code>%1$s</code>
    afterAnyWebElementCall:
      message: Result of call <code>%2$s</code> with args <code>%3$s</code> on <code>%1$s</code> is <code>%4$s</code>
    beforeClick:
      level: INFO
      message: Clicking on <code>%1$s</code>
    afterClick:
      message: Clicked on <code>%1$s</code>
    beforeSubmit:
      level: INFO
      message: Submitting <code>%1$s</code>
    afterSubmit:
      message: Submitted <code>%1$s</code>
    beforeSendKeys:
      level: INFO
      message: Sending keys <code>%2$s</code> to <code>%1$s</code>
    afterSendKeys:
      message: Sent keys <code>%2$s</code> to <code>%1$s</code>
    beforeClear:
      level: DEBUG
      message: Clearing <code>%1$s</code>
    afterClear:
      message: Cleared <code>%1$s</code>
    beforeGetTagName:
      message: Getting tag name of <code>%1$s</code>
    afterGetTagName:
      level: INFO
      message: Tag name of <code>%1$s</code> is <code>%2$s</code>
    beforeGetAttribute:
      message: Getting attribute <code>%2$s</code> of <code>%1$s</code>
    afterGetAttribute:
      level: INFO
      message: Attribute <code>%2$s</code> of <code>%1$s</code> is <code>%3$s</code>
    beforeIsSelected:
      message: Checking if <code>%1$s</code> is selected
    afterIsSelected:
      level: INFO
      message: Element <code>%1$s</code> is selected? <code>%2$s</code>
    beforeIsEnabled:
      message: Checking if <code>%1$s</code> is enabled
    afterIsEnabled:
      level: INFO
      message: Element <code>%1$s</code> is enabled? <code>%2$s</code>
    beforeGetText:
      message: Getting text of <code>%1$s</code>
    afterGetText:
      level: INFO
      message: Text of <code>%1$s</code> is '<code>%2$s</code>'
    beforeFindWebElement:
      level: DEBUG
      message: About to find element <code>%2$s</code> inside <code>%1$s</code>
    afterFindWebElement:
      message: Element <code>%2$s</code> inside <code>%1$s</code> is <code>%3$s</code>
    beforeFindWebElements:
      level: DEBUG
      message: About to find elements <code>%2$s</code> inside <code>%1$s</code>
    afterFindWebElements:
      message: Elements <code>%2$s</code> inside <code>%1$s</code> are <code>%3$s</code>
    beforeIsDisplayed:
      message: Checking if <code>%1$s</code> is displayed
    afterIsDisplayed:
      level: INFO
      message: Element <code>%1$s</code> is displayed? <code>%2$s</code>
    beforeGetLocation:
      message: Getting location of <code>%1$s</code>
    afterGetLocation:
      level: INFO
      message: Location of <code>%1$s</code> is <code>%2$s</code>
    beforeGetSize:
      message: Getting size of <code>%1$s</code>
    afterGetSize:
      message: Size of <code>%1$s</code> is <code>%2$s</code>
    beforeGetCssValue:
      message: Getting css property <code>%2$s</code> of element <code>%1$s</code>
    afterGetCssValue:
      level: INFO
      message: Css property <code>%2$s</code> of element <code>%1$s</code> is <code>%3$s</code>
    beforeAnyNavigationCall:
      message: Calling navigation method <code>%2$s</code> with args <code>%3$s</code>
    afterAnyNavigationCall:
      message: Navigation method <code>%2$s</code> with args <code>%3$s</code> led to <code>%4$s</code>
    beforeTo:
      level: INFO
      message: Navigating to <code>%2$s</code>
    afterTo:
      message: Navigated to <code>%2$s</code>
    beforeBack:
      level: INFO
      message: Going back
    afterBack:
      message: Went back
    beforeForward:
      level: INFO
      message: Going forward
    afterForward:
      message: Went forward
    beforeRefresh:
      level: INFO
      message: Refreshing page
    afterRefresh:
      message: Page refreshed
    beforeAnyAlertCall:
      message: Calling alert method <code>%2$s</code> with args <code>%3$s</code>
    afterAnyAlertCall:
      message: Alert method <code>%2$s</code> with args <code>%3$s</code> resulted in <code>%4$s</code>
    beforeAccept:
      level: INFO
      message: Accepting alert
    afterAccept:
      message: Alert accepted
    beforeDismiss:
      level: INFO
      message: Dismissing alert
    afterDismiss:
      message: Alert dismissed
    beforeAnyOptionsCall:
      message: Calling options method <code>%2$s</code> with args <code>%3$s</code>
    afterAnyOptionsCall:
      message: Options method <code>%2$s</code> with args <code>%3$s</code> resulted in <code>%4$s</code>
    beforeAddCookie:
      level: TRACE
      message: Adding cookie <code>%2$s</code>
    afterAddCookie:
      message: Added cookie <code>%2$s</code>
    beforeDeleteCookieNamed:
      level: TRACE
      message: Deleting cookie named <code>%2$s</code>
    afterDeleteCookieNamed:
      message: Cookie named <code>%2$s</code> deleted
    beforeDeleteCookie:
      level: TRACE
      message: Deleting cookie <code>%2$s</code>
    afterDeleteCookie:
      message: Cookie <code>%2$s</code> deleted
    beforeDeleteAllCookies:
      level: TRACE
      message: Deleting all cookies
    afterDeleteAllCookies:
      message: All cookies deleted
    beforeGetCookies:
      level: TRACE
      message: Getting cookies
    afterGetCookies:
      message: Cookies are <code>%2$s</code>
    beforeGetCookieNamed:
      level: TRACE
      message: Getting cookie named <code>%2$s</code>
    afterGetCookieNamed:
      message: Cookie named <code>%2$s</code> is <code>%3$s</code>
    beforeAnyTimeoutsCall:
      message: About to reach timeout on method <code>%2$s</code> with args <code>%3$s</code>
    afterAnyTimeoutsCall:
      message: Got timeout on method <code>%2$s</code> with args <code>%3$s</code> and result <code>%4$s</code>
    beforeImplicitlyWait:
      message: Waiting for <code>%2$s</code>
    afterImplicitlyWait:
      message: Waited for <code>%2$s</code>
    beforeScriptTimeout:
      message: Setting script timeout to <code>%2$s</code>
    afterScriptTimeout:
      message: Script timeout set to <code>%2$s</code>
    beforePageLoadTimeout:
      message: About to reach page load timeout of <code>%2$s</code>
    afterPageLoadTimeout:
      message: Reached page load timeout of <code>%2$s</code>
    beforeAnyWindowCall:
      message: Calling window method <code>%2$s</code> with args <code>%3$s</code>
    afterAnyWindowCall:
      message: Window method <code>%2$s</code> with args <code>%3$s</code> resulted in <code>%4$s</code>
    beforeGetWindowSize:
      message: Getting size of window <code>%1$s</code>
    afterGetWindowSize:
      level: TRACE
      message: Size of window <code>%1$s</code> is <code>%2$s</code>
    beforeSetSize:
      message: Settings size to <code>%2$s</code>
    afterSetSize:
      level: INFO
      message: Set size to <code>%2$s</code>
    beforeGetPosition:
      message: Getting window position
    afterGetPosition:
      level: INFO
      message: Window position is <code>%2$s</code>
    beforeSetPosition:
      message: Setting window position to <code>%2$s</code>
    afterSetPosition:
      level: INFO
      message: Set window position to <code>%2$s</code>
    beforeMaximize:
      level: DEBUG
      message: Maximizing window
    afterMaximize:
      message: Window maximized
    beforeFullscreen:
      level: DEBUG
      message: Setting fullscreen
    afterFullscreen:
      message: Window set to fullscreen
    beforeAnyTargetLocatorCall:
      message: Before target locator <code>%1$s</code> call
    afterAnyTargetLocatorCall:
      message: Result of target locator <code>%1$s</code> call is <code>%2$s</code>
    beforeFrame:
      message: Before frame <code>%1$s</code> <code>%2$s</code>
    afterFrame:
      message: After frame <code>%1$s</code> <code>%2$s</code>
    beforeParentFrame:
      message: Before parent frame <code>%1$s</code>
    afterParentFrame:
      message: After parent frame <code>%1$s</code>
    beforeWindow:
      message: Before window <code>%1$s</code> <code>%2$s</code>
    afterWindow:
      message: After window <code>%1$s</code> <code>%2$s</code>
    beforeNewWindow:
      message: Before new window <code>%1$s</code> <code>%2$s</code>
    afterNewWindow:
      message: After new window <code>%1$s</code> <code>%2$s</code>
    beforeDefaultContent:
      message: Before default content <code>%1$s</code>
    afterDefaultContent:
      message: After default content <code>%1$s</code>
    beforeActiveElement:
      message: Before active element <code>%1$s</code>
    afterActiveElement:
      message: After active element <code>%1$s</code>
    beforeAlert:
      message: Before alert <code>%1$s</code>
    afterAlert:
      message: After alert <code>%1$s</code> <code>%2$s</code>

# Data models
data:
  folder: data  # sub-folder under src/test/resources where to find your data*.yaml

# FreeMarker template engine configuration. See https://freemarker.apache.org/
freeMarker:
  version: 2.3.32
  locale: US
  numberFormat: 0.##;; roundingMode=halfUp

faker:
  locale: en
  random: null

# Internal events consumers. Cannot be removed, modified, nor added from client side configuration*.yaml, as lists' elements are appended when merging yaml files. You can add yours
eventsConsumers:
  - videoInit: # initialize the video for each test
      events:
        - reason: beforeExecution
          tags: [ test ]
  - videoDynamicInit: # initialize the video for each dynamic test
      events:
        - reason: beforeExecution
          tags: [ dynamicTest ]
  - genericScreenshot: # common operations on screenshots
      events:
        - primaryId: .*
          reason: screenshot
  - extentScreenshot: # add the screenshot to the Extent Report
      events:
        - primaryId: (manual)
          reason: screenshot
  - visualRegressionCheck: # check the previously generated screenshot reference for visual regression
      failOnError: true # to enable fail fast effectively break the test immediately
      events:
        - primaryId: (manual|visualRegressionManual)
          reason: screenshot
  - visualRegressionReferenceCreator: # create the screenshot reference for visual regression
      failOnError: true # to enable failed checks break the test immediately
      events:
        - primaryId: (manual|visualRegressionManual)
          reason: screenshot
  - video: # add the screenshot to the video
      events:
        - primaryId: (manual|auto)
          reason: screenshot
  - videoDynamic: # add the screenshot to the dynamic video
      events:
        - primaryId: (manual|auto)
          reason: screenshot
  - extentTestEnd: # add an entry to the Extent Report once each test is done
      events:
        - reason: after
          tags: [ test ]
  - videoFinalizer: # finalize the video once each test is done
      events:
        - reason: after
          tags: [ test, testFactory ]
  - videoDynamicFinalizer: # finalize the video once each dynamic test is done
      events:
        - reason: after
          tags: [ dynamicTest ]
  - testbook: # update the TestBook once each test is done
      events:
        - reason: after
          tags: [ test ]
  - driver: # close the driver once each test is done
      events:
        - reason: after
          tags: [ test, testFactory ]
